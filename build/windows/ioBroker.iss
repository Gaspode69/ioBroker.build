; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ioBroker automation platform"
#define MyAppShortName "ioBroker"
#define MyAppLCShortName "iobroker"
#define MyAppVersion "@@version"
#define MyAppPublisher "ioBroker GmbH"
#define MyAppURL "https://www.ioBroker.net/"
#define MyAppIcon "ioBroker.ico"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{97DA02F5-2E8C-4B96-BB42-61ED2BBF34DF}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={drive:{commonpf}}\ioBroker
;DisableDirPage=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputDir=..\..\delivery
OutputBaseFilename={#MyAppShortName}Installer.{#MyAppVersion}
SetupIconFile={#MyAppIcon}
Compression=lzma
SolidCompression=yes
UsePreviousAppDir=yes
ArchitecturesInstallIn64BitMode=x64
UninstallDisplayIcon={app}\{#MyAppIcon}
CloseApplications=yes
MissingRunOnceIdsWarning=no
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "german";  MessagesFile: "compiler:Languages\German.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

; enable scripting to force admin mode
[Registry]
Root: HKLM; Subkey: "Software\Microsoft\Windows Script Host\Settings"; ValueType: dword; ValueName: "Enabled"; ValueData: "00000001"

[Files]
Source: "nodejs\node.msi"; DestDir: "{app}"; Flags: ignoreversion deleteafterinstall; Check: not Is64BitInstallMode
Source: "nodejs\node-x64.msi"; DestDir: "{app}"; DestName: "node.msi"; Flags: ignoreversion deleteafterinstall; Check: Is64BitInstallMode
Source: "{#MyAppIcon}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppShortName} Settings"; Filename: "http://localhost:8081"; IconFilename: "{app}\{#MyAppIcon}"
Name: "{group}\Uninstall {#MyAppShortName}"; Filename: "{uninstallexe}"; IconFilename: {app}\{#MyAppIcon};
Name: "{group}\{#MyAppShortName} Uninstall"; Filename: "{uninstallexe}"; IconFilename: {app}\{#MyAppIcon};
Name: "{group}\Start {#MyAppShortName} Service"; Filename: "{app}\serviceIoBroker.bat"; Parameters: "start"
Name: "{group}\Stop {#MyAppShortName} Service"; Filename: "{app}\serviceIoBroker.bat"; Parameters: "stop"
Name: "{group}\Restart {#MyAppShortName} Service"; Filename: "{app}\serviceIoBroker.bat"; Parameters: "restart"

[CustomMessages]
german.PortsInUseCaption=Erforderliche Ports blockiert
english.PortsInUseCaption=Required ports blocked
russian.PortsInUseCaptiuon=Требуемые порты заняты
german.PortsInUseDescription=Die für ioBroker erforderlichen Ports sind nicht verfügbar
english.PortsInUseDescription=The required ports are not available
russian.PortsInUseDescription=Требуемые порты недоступны
german.PortsInUseMessage=Mindestens einer der für ioBroker benötigten Ports (8081, 9000, 9001) wird aktuell verwendet.%nStellen Sie vor der Installation sicher, dass diese Ports für ioBroker verfügbar sind.%n%nDie Installation kann nicht fortgesetzt werden!
english.PortsInUseMessage=At least one of the ports used by ioBroker (8081, 9000, 9001) is currently in use.%nPlease make sure that these ports are available before installing ioBroker.%n%nThe installation can not be continued!
russian.PortsInUseMessage=По крайней мере один из портов, используемых ioBroker (8081, 9000, 9001), в настоящее время используется.%nПеред установкой ioBroker убедитесь, что эти порты доступны.%n%nПродолжение установки невозможно!

[Code]
function isPortUsed(APort:String):Boolean;
var
  ResultCode: Integer;
begin
  Exec(ExpandConstant('{cmd}'), '/C netstat -na | findstr'+' /C:":' + APort + ' "', '', 0, ewWaitUntilTerminated, ResultCode);
  Result := ResultCode <> 1;
end;

procedure MessagePageActivate(Sender: TWizardPage);
begin
  Wizardform.NextButton.Enabled := False;
end;

procedure InitializeWizard;
var
  OutputMsgWizardPage: TOutputMsgWizardPage;
  ShowPortsDisabledPage: Boolean;
begin
  ShowPortsDisabledPage := isPortUsed('8081') or isPortUsed('9000') or isPortUsed('9001');
  if ShowPortsDisabledPage then
  begin
    OutputMsgWizardPage := CreateOutputMsgPage(wpWelcome, CustomMessage('PortsInUseCaption'), CustomMessage('PortsInUseDescription'), CustomMessage('PortsInUseMessage'));
    OutputMsgWizardPage.OnActivate := @MessagePageActivate;
  end;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  ResultCode: integer;
begin
  Result := '';
  if FileExists(ExpandConstant('{app}\serviceIoBroker.bat')) then begin
     Exec(ExpandConstant('{app}\serviceIoBroker.bat'), 'stop', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
end;

function FileReplaceString(const FileName, SearchString, ReplaceString: string):boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  MyFile := TStringList.Create;

  try
    result := true;

    try
      MyFile.LoadFromFile(FileName);
      MyText := MyFile.Text;

      if StringChangeEx(MyText, SearchString, ReplaceString, True) > 0 then //Only save if text has been changed.
      begin;
        MyFile.Text := MyText;
        MyFile.SaveToFile(FileName);
      end;
    except
      result := false;
    end;
  finally
    MyFile.Free;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  fileName : string;
  lang : string;
begin
  if  CurStep=ssPostInstall then
    begin
      lang := ActiveLanguage();
      if lang = 'russian' then begin
        lang := 'ru';
      end
      else begin
          if lang = 'german' then begin
            lang := 'de';
          end
          else begin
            lang := '';
          end;
      end;
      if lang <> '' then begin
          fileName := ExpandConstant('{app}\settings-dist.json');
          //FileReplaceString(fileName, '"language": "en"', '"language": "' + lang + '"');
      end;
    end;
end;

function CheckNodeJs(NodeFileName: string): boolean;
var
  NodeMS, NodeLS: Cardinal;
  NodeMajorVersion, NodeMinorVersion: Cardinal;
begin
  Log(Format('Found Node.js path %s', [NodeFileName]));
  Result := GetVersionNumbers(NodeFileName, NodeMS, NodeLS);
  if not Result then
  begin
    result := false;
  end
    else
  begin
    { NodeMS is 32-bit integer with high 16 bits holding major version and }
    { low 16 bits holding minor version }

    { shift 16 bits to the right to get major version }
    NodeMajorVersion := NodeMS shr 16;
    { select only low 16 bits }
    NodeMinorVersion := NodeMS and $FFFF;
    Log(Format('Node.js version is %d.%d', [NodeMajorVersion, NodeMinorVersion]));
    result := (NodeMajorVersion >= 14);
  end;
end;

function NodeJsPath(Param: String):String;
begin
  result := '';
  RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Node.js', 'InstallPath', result);
  if (result <> '') then
  begin
    result := ExtractFilePath(result);
    Log(Format('Found Node.js path %s', [result]));
  end
    else
  begin
    Log( 'Node.js not found in registry.');
  end;
end;

function NodeJsNeedsInstall():boolean;
var
  ResultCode: integer;
  nodeExePath: string;
begin
  result := true;
  nodeExePath := NodeJsPath('');
  if (nodeExePath <> '') then
  begin
    nodeExePath := nodeExePath + 'node.exe';
    result := not FileExists(nodeExePath);
    if not result then begin
      result := not CheckNodeJs(nodeExePath);
    end;
  end;
  if not DirExists(ExpandConstant('{userappdata}\npm')) then begin
     Exec(ExpandConstant('mkdir'), ExpandConstant('{userappdata}\npm'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
  if not DirExists(ExpandConstant('{userappdata}\npm-cache')) then begin
     Exec(ExpandConstant('mkdir'), ExpandConstant('{userappdata}\npm-cache'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
end;

function GetAdminPageText(Param: String):String;
begin
  result := 'Open settings page';

  if ActiveLanguage() = 'german' then begin
    result := 'Einstellungen aufmachen';
  end;

  if ActiveLanguage() = 'russian' then begin
      result := 'Открыть настройки';
  end;
end;

[Run]
; postinstall launch
Filename: "msiexec.exe"; Parameters: "/i ""{app}\node.msi"" /passive"; Check: NodeJsNeedsInstall
;
;Filename: "{code:NodeJsPath}\npm.cmd"; Parameters: "install iobroker --prefix ""{app}""";
;Filename: "{code:NodeJsPath}\npm.cmd"; Parameters: "install --production"; WorkingDir: "{app}";
;Filename: "{app}\serviceIoBroker.bat"; Parameters: "start"; WorkingDir: "{app}";
;
;Filename: "{code:NodeJsPath}\npx.cmd"; Parameters: "github:iobroker/iobroker#windows-installer"; WorkingDir: "{app}";
Filename: "{code:NodeJsPath}\npx.cmd"; Parameters: "@iobroker/install"; WorkingDir: "{app}";
;
; Add Firewall Rules
; Filename: "{sys}\netsh.exe"; Parameters: "advfirewall firewall add rule name=""Node In"" program=""{code:NodeJsPath}\node.exe"" dir=in action=allow enable=yes"; Flags: runhidden;
; Filename: "{sys}\netsh.exe"; Parameters: "advfirewall firewall add rule name=""Node Out"" program=""{code:NodeJsPath}\node.exe"" dir=out action=allow enable=yes"; Flags: runhidden;
Filename: http://localhost:8081/; Description: "{code:GetAdminPageText}"; Flags: postinstall shellexec


[UninstallDelete]
Type: filesandordirs; Name: "{app}\daemon"
Type: filesandordirs; Name: "{app}\node_modules"
Type: filesandordirs; Name: "{app}\install"
Type: filesandordirs; Name: "{app}\iobroker-data"
Type: filesandordirs; Name: "{app}\log"
Type: filesandordirs; Name: "{app}\*.js"
Type: filesandordirs; Name: "{app}\*.md"
Type: filesandordirs; Name: "{app}\*.cmd"
Type: filesandordirs; Name: "{app}\*.bat"
Type: filesandordirs; Name: "{app}\*.json"
Type: filesandordirs; Name: "{app}\*.ps1"
Type: filesandordirs; Name: "{app}\*.sh"
Type: filesandordirs; Name: "{app}\LICENSE"
Type: filesandordirs; Name: "{app}\semver"

[UninstallRun]
; Removes System Service
Filename: "{code:NodeJsPath}\node.exe"; Parameters: """{app}\uninstall.js"""; Flags: runhidden;
;Filename: "{sys}\del"; Parameters: "/Q /S ""{app}\daemon""";
;Filename: "{sys}\rmdir"; Parameters: "/Q /S ""{app}\daemon""";
;Filename: "{sys}\del"; Parameters: "/Q /S ""{app}\node_modules""";
;Filename: "{sys}\rmdir"; Parameters: "/Q /S ""{app}\node_modules""";
; Remove Firewall Rules
; Filename: "{sys}\netsh.exe"; Parameters: "advfirewall firewall delete rule name=""Node In"" program=""{code:NodeJsPath}\node.exe"""; Flags: runhidden;
; Filename: "{sys}\netsh.exe"; Parameters: "advfirewall firewall delete rule name=""Node Out"" program=""{code:NodeJsPath}\node.exe"""; Flags: runhidden;
; Remove all leftovers
